// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package edu.unlv.cs.rebelhotel.domain;

import edu.unlv.cs.rebelhotel.domain.RandomValidation;
import java.util.List;
import java.util.Random;
import org.springframework.stereotype.Component;

privileged aspect RandomValidationDataOnDemand_Roo_DataOnDemand {
    
    declare @type: RandomValidationDataOnDemand: @Component;
    
    private Random RandomValidationDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<RandomValidation> RandomValidationDataOnDemand.data;
    
    public RandomValidation RandomValidationDataOnDemand.getNewTransientRandomValidation(int index) {
        edu.unlv.cs.rebelhotel.domain.RandomValidation obj = new edu.unlv.cs.rebelhotel.domain.RandomValidation();
        obj.setBatch_id(new Integer(index).longValue());
        obj.setBatch_date(new java.util.GregorianCalendar(java.util.Calendar.getInstance().get(java.util.Calendar.YEAR), java.util.Calendar.getInstance().get(java.util.Calendar.MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.HOUR_OF_DAY), java.util.Calendar.getInstance().get(java.util.Calendar.MINUTE), java.util.Calendar.getInstance().get(java.util.Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime());
        obj.setNum_pending(new Integer(index));
        obj.setNum_validated(new Integer(index));
        obj.setNum_failed_validation(new Integer(index));
        return obj;
    }
    
    public RandomValidation RandomValidationDataOnDemand.getSpecificRandomValidation(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        RandomValidation obj = data.get(index);
        return RandomValidation.findRandomValidation(obj.getId());
    }
    
    public RandomValidation RandomValidationDataOnDemand.getRandomRandomValidation() {
        init();
        RandomValidation obj = data.get(rnd.nextInt(data.size()));
        return RandomValidation.findRandomValidation(obj.getId());
    }
    
    public boolean RandomValidationDataOnDemand.modifyRandomValidation(RandomValidation obj) {
        return false;
    }
    
    public void RandomValidationDataOnDemand.init() {
        data = edu.unlv.cs.rebelhotel.domain.RandomValidation.findRandomValidationEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'RandomValidation' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<edu.unlv.cs.rebelhotel.domain.RandomValidation>();
        for (int i = 0; i < 10; i++) {
            edu.unlv.cs.rebelhotel.domain.RandomValidation obj = getNewTransientRandomValidation(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
