// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package edu.unlv.cs.rebelhotel.domain;

import edu.unlv.cs.rebelhotel.domain.Employer;
import java.lang.String;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Employer_Roo_Finder {
    
    public static TypedQuery<Employer> Employer.findEmployersByNameLike(String name) {
        if (name == null || name.length() == 0) throw new IllegalArgumentException("The name argument is required");
        name = name.replace('*', '%');
        if (name.charAt(0) != '%') {
            name = "%" + name;
        }
        if (name.charAt(name.length() -1) != '%') {
            name = name + "%";
        }
        EntityManager em = Employer.entityManager();
        TypedQuery<Employer> q = em.createQuery("SELECT Employer FROM Employer AS employer WHERE LOWER(employer.name) LIKE LOWER(:name)", Employer.class);
        q.setParameter("name", name);
        return q;
    }
    
    public static TypedQuery<Employer> Employer.findEmployersByNameEquals(String name) {
        if (name == null || name.length() == 0) throw new IllegalArgumentException("The name argument is required");
        EntityManager em = Employer.entityManager();
        TypedQuery<Employer> q = em.createQuery("SELECT Employer FROM Employer AS employer WHERE employer.name = :name", Employer.class);
        q.setParameter("name", name);
        return q;
    }
    
    public static TypedQuery<Employer> Employer.findEmployersByName(String name) {
        if (name == null || name.length() == 0) throw new IllegalArgumentException("The name argument is required");
        EntityManager em = Employer.entityManager();
        TypedQuery<Employer> q = em.createQuery("SELECT Employer FROM Employer AS employer WHERE employer.name = :name", Employer.class);
        q.setParameter("name", name);
        return q;
    }
    
    public static TypedQuery<Employer> Employer.findEmployersByLocation(String location) {
        if (location == null || location.length() == 0) throw new IllegalArgumentException("The location argument is required");
        EntityManager em = Employer.entityManager();
        TypedQuery<Employer> q = em.createQuery("SELECT Employer FROM Employer AS employer WHERE employer.location = :location", Employer.class);
        q.setParameter("location", location);
        return q;
    }
    
    public static TypedQuery<Employer> Employer.findEmployersByLocationEquals(String location) {
        if (location == null || location.length() == 0) throw new IllegalArgumentException("The location argument is required");
        EntityManager em = Employer.entityManager();
        TypedQuery<Employer> q = em.createQuery("SELECT Employer FROM Employer AS employer WHERE employer.location = :location", Employer.class);
        q.setParameter("location", location);
        return q;
    }
    
    public static TypedQuery<Employer> Employer.findEmployersByLocationLike(String location) {
        if (location == null || location.length() == 0) throw new IllegalArgumentException("The location argument is required");
        location = location.replace('*', '%');
        if (location.charAt(0) != '%') {
            location = "%" + location;
        }
        if (location.charAt(location.length() -1) != '%') {
            location = location + "%";
        }
        EntityManager em = Employer.entityManager();
        TypedQuery<Employer> q = em.createQuery("SELECT Employer FROM Employer AS employer WHERE LOWER(employer.location) LIKE LOWER(:location)", Employer.class);
        q.setParameter("location", location);
        return q;
    }
    
}
